### vagrant user in docker group => no need for sudo ###
whoami
more /etc/group | grep docker

#### show files on localhost ###
docker run -it ubuntu /bin/bash
echo 'Hello !' > tmp/hello.txt
docker images
docker ps -a
sudo su
ls -lrt /var/lib/docker/aufs/diff (image layers)
exit

### edit container and create a new image ###
docker run -it ubuntu /bin/bash
apt-get update
apt-get install iputils-ping
exit
docker commit <container id> omenia/ubuntu-with-ping
docker run -d omenia/ubuntu-with-ping ping 8.8.8.8
docker logs -f <container id>

### start, stop, remove ###
docker ps -a
docker start <container id>
docker logs -f <container id>
docker stop <container id>
docker ps -a
docker info
ls /var/lib/docker/containers/ | wc -l (containers in host)
docker rm <container id>
docker info

### one process per container ###
docker run -d omenia/ubuntu-with-ping /bin/bash
docker ps
docker top <container id>
docker exec <container id> ps
docker run -d omenia/ubuntu-with-ping ping 8.8.8.8
docker ps
docker top <container id>
docker exec <container id> ps

### exit container without kill ###
docker run -it ubuntu /bin/bash
CTRL p CTRL q
docker ps

### getting shell in container ###
docker run -d omenia/ubuntu-with-ping ping 8.8.8.8
docker exec -it <container id> /bin/bash
ps -ef
exit
docker ps

### inspect ###
docker run -d ubuntu /bin/bash
docker inspect <container id>

### build from dockerfile ###
cp /vagrant/Dockerfile .
docker build -t helloworld:1.0 .
docker images
docker history <image id>
docker run helloworld:1.0

### docker file and image layers ###
docker pull ubuntu
docker images
docker inspect <image id> (5 layers)
cp /vagrant/Dockerfile_2 .
docker build -t="non-optimal-build" -f Dockerfile_2 .
docker images (image size: 673.6 MB)
docker inspect <image id> (9 layers)
cp /vagrant/Dockerfile_3 .
docker build -t="optimal-build" -f Dockerfile_3 .
docker images (image size: 673.6 MB)
docker inspect <image id> (9 layers)

### entrypoint command ###
docker build -t entrypoint_test -f Dockerfile_4 .
docker images
docker run entrypoint_test hello !
docker run -it entrypoint_test /bin/bash (Entrypoint not overriden)
docker run -it optimal-build /bin/bash (Cmd is overriden)

### volumes ###
docker run -it -v /tmp_vol --name volume_test ubuntu /bin/bash
CTRL p CTRL q
docker ps
docker inspect <container id>
docker rm -v <container id>
docker run -it -v /home/vagrant/data:/data_tmp ubuntu /bin/bash
more /data_tmp/test.txt

### docker0 bridge ###
sudo apt-get install bridge-utils
brctl show docker0  (see list of connected interfaces)
cp /vagrant/Dockerfile_5 .
docker build -t network_test -f Dockerfile_5 .
docker run -it --name net1 network_test
docker run -it --name net2 network_test
CTRL P Q
brctl show
docker inspect net1  (gateway + ip address)
docker inspect net2

### expose ports ###
docker build -t port-test -f Dockerfile_6 .
docker run -d -p 5001:80 --name=port-test1 port-test
(expose vagrant image ip !!!!)






















